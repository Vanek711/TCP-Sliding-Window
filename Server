import sys
import socket
import threading
from threading import Thread
import time

sys.setrecursionlimit(2000)
print(sys.getrecursionlimit())

pkt_rec_cnt = 0 
total_packets = 10000000
seq_num = 0 
packet_size = 4 
max_seq_num = 65536 
exp_sn = 1 #
missing_packets = [] 
received_pkts = [] 
good_put_store = [] 
seq_nums = [] 
rec_buf = '' 
buffer_size = 8192 
min_buffer_size = 1024 
max_buffer_size = 32768 
client_name = ''
st = time.time() 

rec_f = open(f"recv_seq_num_{int(time.time())}.csv", "w")
rec_f.write("seq_num,tm\n")
gp_f = open(f"good_put_{int(time.time())}.csv", "w")
gp_f.write("recv_pkt,sent_pkt,good_put\n")
rep_lock = threading.Lock()

receiver_window_size_f = open(f"receiver_window_size_{int(time.time())}.csv", "w")
receiver_window_size_f.write("receiver_window_size,tm\n")
win_lock = threading.Lock()

def set_connection():
    global serversocket, host

    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    host = socket.gethostname()
    print(host)
    port = 2222

    try :
        serversocket.bind(('192.168.1.83', port)) 
    except socket.error as e :
        print(str(e))

    print("Waiting to connect...")
    serversocket.listen(5) 
    print( "Listening on " + str(host) + ":" + str(port))


def connect():

    global conn, serversocket, pkt_rec_cnt, seq_num, exp_sn, missing_packets, received_pkts, good_put_store, seq_nums, rec_buf, buffer_size, rec_f, gp_f, rep_lock, client_name, st

    if(pkt_rec_cnt+(total_packets/100) > total_packets):
        pkt_rec_cnt = total_packets
        execution_complete()
        return

    conn, address = serversocket.accept()
    st = time.time()
    print('Connected to PC:', address)
    res = (conn.recv(2048)).decode() 
    if(res[:3]=="SYN"): 
        if((pkt_rec_cnt < 10) or (client_name != res[4:]) or (pkt_rec_cnt>(total_packets*0.99))):
            data="sych"
            data=data.encode('utf-8')
            conn.sendall(data) 
            reset()

        else:
            print("Reconnect Failed!")

    else:
        print("Error: client failed to connect!")
        exit()

    try:
        process_packets()
    except Exception as e:
        print(str(e))





def report_window(win_size, tm):
    global window_size_f, win_lock
    win_lock.acquire()
    receiver_window_size_f.write(f"{win_size},{tm}\n")
    win_lock.release()


def process_packets():
    global conn, pkt_rec_cnt, seq_num, exp_sn, missing_packets, received_pkts, good_put_store, seq_nums, rec_buf, buffer_size, st
    
    while (pkt_rec_cnt < total_packets):
        try:
            conn.settimeout(1)
            res = (conn.recv(buffer_size)).decode()
            conn.settimeout(None)
        except:
            return connect() 
            continue

        if(not res):
            print("No Res")
            return connect() 
            continue
            

    execution_complete()
    close_all()


def reset():
    global pkt_rec_cnt, seq_num, exp_sn, missing_packets, received_pkts, good_put_store, seq_nums, rec_buf, buffer_size
 
    pkt_rec_cnt = 0
    seq_num = 0
    exp_sn = 1
    missing_packets = []
    received_pkts = []
    good_put_store = []
    seq_nums = []
    rec_buf = ''
    buffer_size = 8192




def close_all():
    global conn, rec_f, gp_f, conn, receiver_window_size_f

    time.sleep(1)      
    rec_f.close()
    gp_f.close()
    conn.close()
    receiver_window_size_f.close()

if __name__ == '__main__':
    set_connection()
    connect()
    ed = time.time()
    print("Runtime: ", ed-st) 
    
